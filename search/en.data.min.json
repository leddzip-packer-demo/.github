[{"id":0,"href":"/experiment/","title":"Experiment","parent":"Packer experiment / notes","content":"","description":""},{"id":1,"href":"/setup/","title":"Setup","parent":"Packer experiment / notes","content":"","description":""},{"id":2,"href":"/journal/","title":"Journal","parent":"Packer experiment / notes","content":"","description":""},{"id":3,"href":"/journal/day-3/","title":"Day 3","parent":"Journal","content":" Content of the day This lesson is on communicator.\nSince I am using linux, or at least *nix based system, I don\u0026rsquo;t need to provide a communicator in the builder section. However, I do have to provide some additional information so that packer can ssh inside the ec2 that will hold the base AMI.\nssh_username: here will be ubuntu. Depends on the base AMI used. Should refer to the doc of the AMI used to validate the packer file (works only with json file for now, does not work with hcl files): packer validate packer.json.\nregarding credentials (aws_access_key and aws_secret_key) for aws, we don\u0026rsquo;t have to provide them manually (and define them inside the block variable). As long as you have a aws-cli setup with your credential (be careful if you are using multiple accounts), it should be automatic (.aws/credential).\nIf you don\u0026rsquo;t want to use your default profile, you will have to define the entry profile inside your builder to tell aws-cli what is the profile you want to use =\u0026gt; that means that, for company setup, with agent configured correctly, one should not be concerned with providing by themselves those credentials.\ngood refs on the subject:\nhttps://cloudcasts.io/course/a-packer-primer/introduction https://www.youtube.com/watch?v=zF58Z4TdlrA That does mean however that I should find or create a docker image with packer and aws cli if I want to make sure I won\u0026rsquo;t be using my own account, and if I want my packer to be run inside a CI/CD tools (like github action or circleCI).\nI think I will anyway build a new Docker image, just like I did in the past for terraform+aws-cli: https://github.com/leddzip/docker-terraform-aws In the end, the command for terraform was:\ndocker run -it --rm --name terraofrm-test -e AWS_ACCESS_KEY_ID=\u0026#34;XXX\u0026#34; -e AWS_SECRET_ACCESS_KEY=\u0026#34;YYY\u0026#34; -v \u0026#34;$(pwd):/workdir\u0026#34; leddzip/bash-terraform-aws:local-0.1.1 so I expect something similar for packer. Here, having the environment variable AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY defined is enough for aws-cli (used under the hood by terraform (and packer I assume)) to connect to the correct account.\n","description":"Content of the day This lesson is on communicator.\nSince I am using linux, or at least *nix based system, I don\u0026rsquo;t need to provide a communicator in the builder section. However, I do have to provide some additional information so that packer can ssh inside the ec2 that will hold the base AMI.\nssh_username: here will be ubuntu. Depends on the base AMI used. Should refer to the doc of the AMI used to validate the packer file (works only with json file for now, does not work with hcl files): packer validate packer."},{"id":4,"href":"/","title":"Packer experiment / notes","parent":"","content":"","description":""},{"id":5,"href":"/journal/day-2/","title":"Day 2","parent":"Journal","content":" Content of the day Learning packer.\nreference commit\nFor now, I follow along one tuto. It starts by defining a builder, the base setup and configuration needed for packer to build the ami that I want to create. The content of this builder is mostly to select what will be the base images, the instance that will run the base image to modify and some connection setup.\nformat for now, the tuto is using json, I will change it to hcl very soon since I don\u0026rsquo;t like using json for such configuration. Surprisingly, after naming the file packer.json, intellij offer a support to help me fill up some elements.\nbuilder section type: here amazon-ebs. Since it will be used to create AMI backed by Elastic Block Storage volumes, so it can be used by ec2 access_key and private_key: will receive the variable defined prior the builder block. It uses a kind of interpolation with {{ }} region: the AWS region that we will use instance_type: here, micro.t2, no need for more yet. The base AMI that we will use will be launched with this instance type. Unless we are doing so compilation on the fly to install some package, we won\u0026rsquo;t need more ami-name: the name of the ami we will be creating source_ami_filter: this one is tricky. I was expecting a cold hard ref to the ami we will use like ami-0123456789. However, the tuto guide us in using a kind of filtering. Basically, those are the filter you can see when using directly the AWS AMI interface to search for AMI. Here, we give specific filters to target the latest (most_recent: true) base AMI from Canonical (owners: 099720109477), that have a name looking like ubuntu/images/*ubuntu-focal-20.04-amd64-server-*. There are additional filters like the kind of virtualization (hvm) and the root device type (ebs). Not sure however what they are used for (except filtering of course). ","description":"Content of the day Learning packer.\nreference commit\nFor now, I follow along one tuto. It starts by defining a builder, the base setup and configuration needed for packer to build the ami that I want to create. The content of this builder is mostly to select what will be the base images, the instance that will run the base image to modify and some connection setup.\nformat for now, the tuto is using json, I will change it to hcl very soon since I don\u0026rsquo;t like using json for such configuration."},{"id":6,"href":"/journal/day-1/","title":"Day 1","parent":"Journal","content":"The experiment is to work with packer to create a bew base AMI.\nWhat I have in hand: a bit of experience with terraform and HCL a bit of experience with AWS some practical experience with devops practices What am I targeting: a fully functional AMI with docker and docker-compose installed, build with packer once the AMI is created, use it to create an EC2 with terraform all build should be done through github action (I use heavily CircleCI in most of my projects, so let\u0026rsquo;s try something else once) a documentation of my progress using hugo (for fun and to learn as muck as possible along the way) Content of the day; Mostly setup of the projects and the different repos to hold the work on this experiment. Currently there are 3 repos:\none for packer based AMI creation one for terraform using the create AMI to bootstrap an EC2 instance this site, using hugo, to document and log my journey Most of the repo are empty for now, excpet the one for my dev logging. The work done on it is:\nsetup of hugo locally setup of gh action to deploy this site into a gh-page theme configuration and content creation Some thoughs I am pretty sure I\u0026rsquo;ll need a docker image with packer if I want to use it easilly. I could use it directly with a ubuntu runner and install packer in it, but it won\u0026rsquo;t fit the workflow I use with CircleCI (additionnally isolating the build env offers many benefits).\nFor now, hugo is fairly easy to use. A little derouting at the beginning (especially due to the theme I choosed), but once setup, it\u0026rsquo;s a very nice tool.\nReferences for further experimentation https://stackoverflow.com/questions/57549439/how-do-i-use-docker-with-github-actions ","description":"The experiment is to work with packer to create a bew base AMI.\nWhat I have in hand: a bit of experience with terraform and HCL a bit of experience with AWS some practical experience with devops practices What am I targeting: a fully functional AMI with docker and docker-compose installed, build with packer once the AMI is created, use it to create an EC2 with terraform all build should be done through github action (I use heavily CircleCI in most of my projects, so let\u0026rsquo;s try something else once) a documentation of my progress using hugo (for fun and to learn as muck as possible along the way) Content of the day; Mostly setup of the projects and the different repos to hold the work on this experiment."},{"id":7,"href":"/tags/","title":"Tags","parent":"Packer experiment / notes","content":"","description":""}]